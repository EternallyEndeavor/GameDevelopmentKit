using Luban;
{{
    key_type = __table.key_ttype
    value_type =  __table.value_ttype

    func index_type_name
        ret (declaring_type_name $0.type)
    end

    func table_union_map_type_name
        ret 'System.Collections.Generic.Dictionary<(' + (array.each __table.index_list @index_type_name | array.join ', ') + '), ' + (declaring_type_name value_type)  + '>'
    end

    func table_key_list
        varName = $0
        indexList = __table.index_list |array.each do; ret varName + '.' + (format_property_name __code_style $0.index_field.name); end;
        ret array.join indexList ', '
    end

    func table_param_def_list
        paramList = __table.index_list |array.each do; ret (declaring_type_name $0.type) + ' ' + $0.index_field.name; end
        ret array.join paramList ', '
    end

    func table_param_name_list
        paramList = __table.index_list |array.each do; ret $0.index_field.name; end
        ret array.join paramList ', '
    end
}}
{{namespace_with_grace_begin __namespace_with_top_module}}
{{~if __table.comment != '' ~}}
/// <summary>
/// {{escape_comment __table.comment}}
/// </summary>
{{~end~}}
public partial class {{__name}} : IDataTable
{
    {{~if __table.is_map_table ~}}
    private readonly System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}> _dataMap;
    private readonly System.Collections.Generic.List<{{declaring_type_name key_type}}> _dataList;

    public {{__name}}()
    {
        _dataMap = new System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}>();
        PostConstructor();
        PostInit();
    }

    public System.Collections.Generic.List<{{declaring_type_name key_type}}> DataList => _dataList;
    {{~if value_type.is_dynamic~}}
    public T GetAs<T>({{declaring_type_name key_type}} key) where T : {{declaring_type_name value_type}} => TryGetValue(_dataMap, key, out var v) ? (T)v : null;
    {{~end~}}
    public {{declaring_type_name value_type}} Get({{declaring_type_name key_type}} key) => TryGetValue(_dataMap, key, out var v) ? v : null;
    public {{declaring_type_name value_type}} this[{{declaring_type_name key_type}} key] => TryGetValue(_dataMap, key, out var v) ? v : null;

    partial bool InternalTryGetValue({{declaring_type_name key_type}} key, out {{declaring_type_name value_type}} value);

    private {{declaring_type_name value_type}} TryGetValue(System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}> map, {{declaring_type_name key_type}} key, out {{declaring_type_name value_type}} value)
    {
        if(map.TryGetValue(key, out value))
        {
            reuturn true;
        }
        if(InternalTryGetValue(key, out value))
        {
            map.Add(key, value);
            return true;
        }
        value = default;
        return false;
    }

    public void ResolveRef({{__manager_name}} tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }

    {{~else if __table.is_list_table ~}}
    private readonly System.Collections.Generic.List<{{declaring_type_name value_type}}> _dataList;
    {{~if __table.is_union_index~}}
    private {{table_union_map_type_name}} _dataMapUnion;
    {{~else if !__table.index_list.empty?~}}
    {{~for idx in __table.index_list~}}
    private System.Collections.Generic.Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}> _dataMap_{{idx.index_field.name}};
    {{~end~}}
    {{~end~}}

    public {{__name}}()
    {
        {{~if __table.is_union_index~}}
        _dataMapUnion = new {{table_union_map_type_name}}();
        {{~else if !__table.index_list.empty?~}}
        {{~for idx in __table.index_list~}}
        _dataMap_{{idx.index_field.name}} = new System.Collections.Generic.Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}>();
        {{~end~}}
        {{~end~}}
        PostConstructor();
        PostInit();
    }

    public System.Collections.Generic.List<{{declaring_type_name value_type}}> DataList => _dataList;
    {{~if __table.is_union_index~}}
    public {{declaring_type_name value_type}} Get({{table_param_def_list}}) => TryGetValue(_dataMapUnion, ({{table_param_name_list}}), out {{declaring_type_name value_type}} __v) ? __v : null;

    partial bool InternalTryGetValue(({{table_param_type_list}}) key, out {{declaring_type_name value_type}} value);

    private {{declaring_type_name value_type}} TryGetValue({{table_union_map_type_name}} map, ({{table_param_name_list}}) key, out {{declaring_type_name value_type}} value)
    {
        if(map.TryGetValue(key, out value))
        {
            reuturn true;
        }
        if(InternalTryGetValue(key, out value))
        {
            map.Add(key, value);
            return true;
        }
        value = default;
        return false;
    }

    {{~else if !__table.index_list.empty? ~}}
    {{~for idx in __table.index_list~}}
    public {{declaring_type_name value_type}} GetBy{{format_property_name __code_style idx.index_field.name}}({{declaring_type_name idx.type}} key) => TryGetValue(_dataMap_{{idx.index_field.name}}, key, out {{declaring_type_name value_type}} __v) ? __v : null;
    partial bool InternalTryGetValueBy{{format_property_name __code_style idx.index_field.name}}({{declaring_type_name idx.type}} key, out {{declaring_type_name value_type}} value);

    private {{declaring_type_name value_type}} TryGetValueBy{{format_property_name __code_style idx.index_field.name}}(System.Collections.Generic.Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}> map, {{declaring_type_name idx.type}} key, out {{declaring_type_name value_type}} value)
    {
        if(map.TryGetValue(key, out value))
        {
            reuturn true;
        }
        if(InternalTryGetValue(key, out value))
        {
            map.Add(key, value);
            return true;
        }
        value = default;
        return false;
    }
    {{~end~}}
    {{~end~}}

    public void ResolveRef({{__manager_name}} tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }
    {{~else~}}

    private {{declaring_type_name value_type}} _data;
    public {{declaring_type_name value_type}} Data => _data;

    public {{__name}}()
    {
        PostConstructor();
        PostInit();
    }

    {{~ for field in value_type.def_bean.hierarchy_export_fields ~}}
    {{~if field.comment != '' ~}}
    /// <summary>
    /// {{escape_comment field.comment}}
    /// </summary>
    {{~end~}}
    public {{declaring_type_name field.ctype}} {{format_property_name __code_style field.name}} => _data.{{format_property_name __code_style field.name}};
    {{~end~}}

    public void ResolveRef({{__manager_name}} tables)
    {
        _data.ResolveRef(tables);
    }
    {{~end~}}

    partial void PostConstructor();
    partial void PostInit();
}
{{namespace_with_grace_end __namespace_with_top_module}}