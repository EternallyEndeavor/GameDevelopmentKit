using Luban;
{{
    key_type = __table.key_ttype
    value_type =  __table.value_ttype

    func index_type_name
        ret (declaring_type_name $0.type)
    end

    func table_union_map_type_name
        ret 'System.Collections.Generic.Dictionary<(' + (array.each __table.index_list @index_type_name | array.join ', ') + '), ' + (declaring_type_name value_type)  + '>'
    end

    func table_key_list
        varName = $0
        indexList = __table.index_list |array.each do; ret varName + '.' + (format_property_name __code_style $0.index_field.name); end;
        ret array.join indexList ', '
    end

    func table_param_def_list
        paramList = __table.index_list |array.each do; ret (declaring_type_name $0.type) + ' ' + $0.index_field.name; end
        ret array.join paramList ', '
    end

    func table_param_name_list
        paramList = __table.index_list |array.each do; ret $0.index_field.name; end
        ret array.join paramList ', '
    end

    func table_param_type_list
        paramList = __table.index_list |array.each do; ret (declaring_type_name $0.type); end
        ret array.join paramList ', '
    end
}}
{{namespace_with_grace_begin __namespace_with_top_module}}
{{~if __table.comment != '' ~}}
/// <summary>
/// {{escape_comment __table.comment}}
/// </summary>
{{~end~}}
public partial class {{__name}}
{
    private readonly {{__manager_name}} _tables;
    {{~if __table.is_map_table ~}}

    public {{__name}}({{__manager_name}} tables)
    {
        _tables = tables;
        _dataMap = new System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}>();
        PostConstructor();
        PostInit();
    }

    private readonly System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}> _dataMap;
    public System.Collections.Generic.List<{{declaring_type_name key_type}}> KeyList { private set; get; }
    {{~if value_type.is_dynamic~}}
    public T GetAs<T>({{declaring_type_name key_type}} key) where T : {{declaring_type_name value_type}} => TryGetValue(key, out var v) ? (T)v : null;
    {{~end~}}
    public {{declaring_type_name value_type}} Get({{declaring_type_name key_type}} key) => TryGetValue(key, out var v) ? v : null;
    public {{declaring_type_name value_type}} this[{{declaring_type_name key_type}} key] => TryGetValue(key, out var v) ? v : null;

    // private bool InternalTryGetValue({{declaring_type_name key_type}} key, out {{declaring_type_name value_type}} value);
    private bool TryGetValue({{declaring_type_name key_type}} key, out {{declaring_type_name value_type}} value)
    {
        if(_dataMap.TryGetValue(key, out value))
        {
            return true;
        }
        if(InternalTryGetValue(key, out value))
        {
            _dataMap.Add(key, value);
            value.Init(_tables);
            return true;
        }
        value = default;
        return false;
    }

    {{~else if __table.is_union_index~}}
    public {{__name}}({{__manager_name}} tables)
    {
        _tables = tables;
        _dataMapUnion = new {{table_union_map_type_name}}();
        PostConstructor();
        PostInit();
    }

    private {{table_union_map_type_name}} _dataMapUnion;
    public System.Collections.Generic.List<({{table_param_type_list}})> KeyList { private set; get; }
    public {{declaring_type_name value_type}} Get(({{table_param_type_list}}) key) => TryGetValue(key, out {{declaring_type_name value_type}} v) ? v : null;
    public {{declaring_type_name value_type}} Get({{table_param_def_list}}) => Get(({{table_param_name_list}}));

    // partial bool InternalTryGetValue(({{table_param_type_list}}) key, out {{declaring_type_name value_type}} value);
    private bool TryGetValue(({{table_param_type_list}}) key, out {{declaring_type_name value_type}} value)
    {
        if(_dataMapUnion.TryGetValue(key, out value))
        {
            return true;
        }
        if(InternalTryGetValue(key, out value))
        {
            _dataMapUnion.Add(key, value);
            value.Init(_tables);
            return true;
        }
        value = default;
        return false;
    }
    
    {{~else if !__table.index_list.empty?~}}
    public {{__name}}({{__manager_name}} tables)
    {
        _tables = tables;
        {{~for idx in __table.index_list~}}
        _dataMap_{{idx.index_field.name}} = new System.Collections.Generic.Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}>();
        {{~end~}}
        PostConstructor();
        PostInit();
    }

    {{~for idx in __table.index_list~}}
    private System.Collections.Generic.Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}> _dataMap_{{idx.index_field.name}};
    public System.Collections.Generic.List<{{declaring_type_name idx.type}}> KeyList_{{format_property_name __code_style idx.index_field.name}} { private set; get; }
    public {{declaring_type_name value_type}} GetBy{{format_property_name __code_style idx.index_field.name}}({{declaring_type_name idx.type}} key) => TryGetValueBy{{format_property_name __code_style idx.index_field.name}}(key, out {{declaring_type_name value_type}} __v) ? __v : null;

    // partial bool InternalTryGetValueBy{{format_property_name __code_style idx.index_field.name}}({{declaring_type_name idx.type}} key, out {{declaring_type_name value_type}} value);
    private bool TryGetValueBy{{format_property_name __code_style idx.index_field.name}}({{declaring_type_name idx.type}} key, out {{declaring_type_name value_type}} value)
    {
        if(_dataMap_{{idx.index_field.name}}.TryGetValue(key, out value))
        {
            return true;
        }
        if(InternalTryGetValueBy{{format_property_name __code_style idx.index_field.name}}(key, out value))
        {
            {{~for mapIdx in __table.index_list~}}
            _dataMap_{{mapIdx.index_field.name}}.Add(value.{{format_property_name __code_style mapIdx.index_field.name}}, value);
            {{~end~}}
            value.Init(_tables);
            return true;
        }
        value = default;
        return false;
    }
    {{~end~}}

    {{~else if __table.is_list_table ~}}
    public {{__name}}({{__manager_name}} tables)
    {
        _tables = tables;
        _dataMap = new System.Collections.Generic.Dictionary<int, {{declaring_type_name value_type}}>();
        PostConstructor();
        PostInit();
    }

    private readonly System.Collections.Generic.Dictionary<int, {{declaring_type_name value_type}}> _dataMap;
    public System.Collections.Generic.List<int> KeyList { private set; get; }

    public {{declaring_type_name value_type}} Get(int index) => TryGetValue(index, out {{declaring_type_name value_type}} __v) ? __v : null;
    private bool TryGetValue(int index, out {{declaring_type_name value_type}} value)
    {
        if(_dataMap.TryGetValue(index, out value))
        {
            return true;
        }
        if(InternalTryGetValue(index, out value))
        {
            _dataMap.Add(index, value);
            value.Init(_tables);
            return true;
        }
        value = default;
        return false;
    }

    {{~else~}}
    public {{__name}}({{__manager_name}} tables)
    {
        _tables = tables;
        PostConstructor();
        PostInit();
    }

    private {{declaring_type_name value_type}} _data;
    {{~ for field in value_type.def_bean.hierarchy_export_fields ~}}
    {{~if field.comment != '' ~}}
    /// <summary>
    /// {{escape_comment field.comment}}
    /// </summary>
    {{~end~}}
    public {{declaring_type_name field.ctype}} {{format_property_name __code_style field.name}} => _data.{{format_property_name __code_style field.name}};
    {{~end~}}
    {{~end~}}

    partial void PostConstructor();
    partial void PostInit();
}
{{namespace_with_grace_end __namespace_with_top_module}}